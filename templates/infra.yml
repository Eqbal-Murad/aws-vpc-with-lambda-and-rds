AWSTemplateFormatVersion: 2010-09-09
Description: Foundation Infrastructure 

Parameters:
  paramVpcCIDR:
    Description: Enter the CIDR notation for VPC
    Type: String
    Default:  10.192.0.0/24
  paramPublicSubnet1CIDR:
    Description: Enter the CIDR notation for public subnet in AZ A
    Type: String
    Default: 10.192.10.0/24
  paramPublicSubnet2CIDR:
    Description: Enter the CIDR notation for the public subnet in AZ B
    Type: String
    Default: 10.192.11.0/24
  paramPrivateSubnet1CIDR:
    Description: Enter the CIDR notation for the private subnet in AZ A
    Type: String
    Default: 10.192.20.0/24
  paramPrivateSubnet2CIDR:
    Description: Enter the CIDR notation for the private subnet in AZ B
    Type: String
    Default: 10.192.21.0/24
  appName:
    Description: Application name for "Name" tag
    Type: String
    Default: myApp

Resources:
  myAppVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref paramVpcCIDR
      EnableDnsSupport: true 
      EnableDnsHostnames: true 
      Tags:
      - Key: Name
        Value:  !Join [ "-", [ !Ref appName ,"Vpc"] ]

  myAppInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:  !Join [ "-", [ !Ref appName ,"Igw"] ]

  myAppVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myAppVPC
      InternetGatewayId: !Ref myAppInternetGateway

  myAppPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myAppVPC
      Tags:
      - Key: Name
        Value:  !Join [ "-", [ !Ref appName ,"PublicRt"] ]

  myAppPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: myAppVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref myAppPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myAppInternetGateway

  myAppPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myAppVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ] 
      CidrBlock: !Ref paramPublicSubnet1CIDR
      MapPublicIpOnLaunch: true 
      Tags:
      - Key: Name
        Value:  !Join [ "-", [ !Ref appName ,"PublicSubnet1"] ] 

  myAppPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myAppVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ] 
      CidrBlock: !Ref paramPublicSubnet2CIDR
      MapPublicIpOnLaunch: true 
      Tags:
      - Key: Name
        Value:  !Join [ "-", [ !Ref appName ,"PublicSubnet2"] ] 

  myAppPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myAppPublicRouteTable
      SubnetId: !Ref myAppPublicSubnet1
  
  myAppPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myAppPublicRouteTable
      SubnetId: !Ref myAppPublicSubnet2

  myAppEIPforNatGateway1:
    Type: AWS::EC2::EIP
    DependsOn: myAppVPCGatewayAttachment
    Properties:
      Domain: vpc 
      Tags:
      - Key: Name
        Value:  !Join [ "-", [ !Ref appName ,"Eip1"] ] 

  myAppEIPforNatGateway2:
    Type: AWS::EC2::EIP
    DependsOn: myAppVPCGatewayAttachment
    Properties:
      Domain: vpc 
      Tags:
      - Key: Name
        Value:  !Join [ "-", [ !Ref appName ,"Eip2"] ] 

  myAppNatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt myAppEIPforNatGateway1.AllocationId
      SubnetId: !Ref myAppPublicSubnet1
      Tags:
      - Key: Name
        Value:  !Join [ "-", [ !Ref appName ,"Ngw1"] ] 

  myAppNatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt myAppEIPforNatGateway2.AllocationId
      SubnetId: !Ref myAppPublicSubnet2
      Tags:
      - Key: Name
        Value:  !Join [ "-", [ !Ref appName ,"Ngw2"] ]

  myAppPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myAppVPC
      Tags:
      - Key: Name
        Value:  !Join [ "-", [ !Ref appName ,"PrivateRt1"] ]

  myAppPrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myAppVPC
      Tags:
      - Key: Name
        Value:  !Join [ "-", [ !Ref appName ,"PrivateRt2"] ]

  myAppPrivateRouteForAz1:
    Type: AWS::EC2::Route
    DependsOn: myAppVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref myAppPrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref myAppNatGateway1 

  myAppPrivateRouteForAz2:
    Type: AWS::EC2::Route
    DependsOn: myAppVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref myAppPrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref myAppNatGateway2

  myAppPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myAppVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ] 
      CidrBlock: !Ref paramPrivateSubnet1CIDR
      MapPublicIpOnLaunch: false 
      Tags:
      - Key: Name
        Value:  !Join [ "-", [ !Ref appName ,"PrivateSubnet1"] ]

  myAppPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myAppVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ] 
      CidrBlock: !Ref paramPrivateSubnet2CIDR
      MapPublicIpOnLaunch: false 
      Tags:
      - Key: Name
        Value:  !Join [ "-", [ !Ref appName ,"PrivateSubnet2"] ]

  myAppPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myAppPrivateRouteTable1
      SubnetId: !Ref myAppPrivateSubnet1
  
  myAppPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myAppPrivateRouteTable2
      SubnetId: !Ref myAppPrivateSubnet2

  LambdaServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: myApp-lambda-sg
      GroupDescription: Allow postgres connection
      VpcId: !Ref myAppVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: !Ref paramPublicSubnet1CIDR
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: !Ref paramPublicSubnet2CIDR
      - IpProtocol: tcp
        FromPort: '5432'
        ToPort: '5432'
        CidrIp: !Ref paramPrivateSubnet1CIDR
      - IpProtocol: tcp
        FromPort: '5432'
        ToPort: '5432'
        CidrIp: !Ref paramPrivateSubnet2CIDR
      Tags:
        - Key: Name
          Value:  !Join [ "-", [ !Ref appName ,"lambda", "Sg1"] ]

Outputs:
  outputVPC:
    Description: A reference to the created VPC
    Value: !Ref myAppVPC
    Export:
      Name: !Sub "${AWS::StackName}-VpcId"
  outputPublicSubnets1:
    Description: A reference to the public subnet1
    Value:  !Ref myAppPublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1"
  outputPublicSubnets2:
    Description: A reference to the public subnet2
    Value:  !Ref myAppPublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2"
  outputPrivateSubnets1:
    Description: A reference to the private subnet1
    Value:  !Ref myAppPrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1"
  outputPrivateSubnets2:
    Description: A reference to the private subnet2
    Value:  !Ref myAppPrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2"

  outputCidrPublicSubnets1:
    Description: Cidr of the public subnet1
    Value:  !Ref paramPublicSubnet1CIDR 
    Export:
      Name: !Sub "${AWS::StackName}-CidrPublicSubnet1"
  outputCidrPublicSubnets2:
    Description: Cidr of the public subnet2
    Value:  !Ref paramPublicSubnet2CIDR 
    Export:
      Name: !Sub "${AWS::StackName}-CidrPublicSubnet2"
  outputCidrPrivateSubnets1:
    Description: Cidr of the private subnet1
    Value:  !Ref paramPrivateSubnet1CIDR 
    Export:
      Name: !Sub "${AWS::StackName}-CidrPrivateSubnet1"
  outputCidrPrivateSubnets2:
    Description: Cidr of the private subnet2
    Value:  !Ref paramPrivateSubnet2CIDR
    Export:
      Name: !Sub "${AWS::StackName}-CidrPrivateSubnet2"